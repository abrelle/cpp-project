----------------------------------------

ANTRA UŽDUOTIS

----------------------------------------

PRIELAIDOS

Antros užduoties kodas vis dar tenkina pirmos užduoties reikalavimus:

Reikalavimas 1: [Taip]
/* Turi būti bent trys klasės */

Reikalavimas 4: [Taip]
/* Pilnai užtikrinamas klasėse esančių elementų panaudojimas */

Reikalavimas 5: [Taip]
/* Neįmanoma gauti objekto su nekorektiška būsena */

Reikalavimas 8: [Taip]
/* Kiekviena iš klasių turi metodą toString (arba jo analogą) */

Reikalavimas 9: [Taip]
/* Klasėse išlikę pirmoje užduotyje sukurti statiniai klasių elementai */

Reikalavimas 14: [Taip]
/* Kode laikomasi tvarkingo kodo ir stiliaus reikalavimų */

----------------------------------------

REIKALAVIMAI 1 ir 13

Visos klasės yra patalpintos į vieną (savo sukurtą) vardų erdvę: 
[Taip]

Kiekviena iš klasių turi savo antraštės ir savo realizacijos failą:
[Taip]

Antraštės failai yra apsaugoti nuo pakartotinio įtraukimo:
[Taip]

/* Patvirtiname, jog daug sykį bandant įtraukti (include) antraštės failą jis bus įtraukiamas tik vieną sykį */

Antraštės failuose nėra realizacijų:
[Taip]

/* Patvirtiname, jog klasių realizacija yra pilnai perkelta į realizacijos failus */

----------------------------------------

REIkALAVIMAI 2 ir 5

Klasėse yra tarpiniai išvedimai, įjungiami/išjungiami makrosų pagalba: 
[Taip]

Tarpiniai išvedimai:

[Item, Item.cpp:17]
[CashBox, Coins.cpp:49]
[Slot, Slot.cpp:25]

/* Nurodome tarpinius išvedimus skirtingose klasėse 


Tarpiniai išvedimai siunčiami į išvedimo srautą:
[cout]

Kode yra vykdomas tarpinius išvedimus priimančio srauto nukreipimas į failą:
[failo_vardas:eilutė]

Įgyvendinta galimybė tarpinius išvedimus matyti tiek faile, tiek ekrane: 
[Ne]

----------------------------------------

REIKALAVIMAS 3

Kiekvienai iš trijų klasių yra parengta bent po tris skirtingus unit testus: 
[Taip]

Kiekvienas iš testų aprašytas kaip atskira funkcija/metodas, turinti(-is) parametrų, įgalinančių leisti testą daug kartų su įvairiomis reikšmėmis: 
[Taip]

Testų aprašymai:

[Item, mainTest.cpp:33, testas privalo praeiti]
[Item, mainTest.cpp:40, testas privalo praeiti, kai klaidingas inputas]
[Item, mainTest.cpp:57, tikrina ar nesikeicia objekto reiksme ivedus klaidinga inputa]

[Slot, mainTest.cpp:113, testas privalo praeiti]
[Slot, mainTest.cpp:120, testas privalo praeiti, kai klaidingas inputas]
[Slot, mainTest.cpp:152, tiktina ar nesikeicia objekto reiksme ivedus klaidinga inputa]

[CashBox, mainTest.cpp:207, testas turi praeiti]
[CashBox, mainTest.cpp:218, testas turi praeiti su kalidingom reiksmem]
[CasBox, mainTest.cpp:240, tiktina operatoriu funkcionaluma]

/* Nurodome klasės, kurią testuojame, vardą, failo vardą bei eilutę, kurioje prasideda aptarinėjamas testas, bei parašome ką būtent tas testas tikrina, įvardindami, kada/koks testavimo atvejis sėkmingas ir koks ne */

Vienetų testai yra atskirti nuo bendros taikomosios programos logikos: 
[Taip]

/* Patvirtiname, jog yra bent dvi main funkcijos - viena, imituojanti taikomąją programą (projektą), kurią tikitės sukurti kurso eigoje, ir kita(-os), kurios(-ių) paskirtis - projekto klasių logikos tikrinimas vienetų testais. */

Main funkcija projekto demonstracijai: [main.cpp:28]
Main funkcija vienetų testams: [mainTest.cpp:291]

/* Jei main funkcijų daugiau negu dvi, daugiau negu dvi ir nurodome */

----------------------------------------

REIKALAVIMAS 4

Bent sykį yra panaudota funkcija assert, programuotojo klaidai(-oms) aptikti:
[Item, Item.cpp:20]

/* Nurodome klasės, kuri tikrinama, vardą, failo vardą bei eilutę, kurioje yra funkcija assert */

----------------------------------------

REIKALAVIMAS 6 ir 14

SUsidarius išimtinėms situacijoms, klasėse sukuriami ir metami (throw) klaidų (exception) objektai: 
[Item::set_price, Item.cpp:49]
[Slot::set_label, Slot.cpp:54]
[CashBox::set_e1, Coins.cpp:132]

/* Nurodome 1-3 vietas, kuriose tai vyksta */

Taikomojoje programoje (ją imituojančioje main funkcijoje) užtikrinama, kad visi klaidų objektai bus pagauti: [Taip]

Gavus netikėtą klaidų objektą, yra spausdinamas informatyvus klaidos pranešimas:
[main.cpp:65, cout]

/* Nurodome failą ir numerį tame faile esančios eilutės, kurioje yra spausdinamas klaidos pranešimas, taip pat nurodome pavadinimą srauto/kintamojo, į kurį tas pranešimas siunčiamas */

----------------------------------------

REIKALAVIMAI 8-10

Yra sukurtas bent vienas vienvietis operatorius:
[Slot::operator++, Slot.cpp:161]

Yra sukurtas bent vienas dvivietis operatorius:
[Item::operator==, Item.cpp:118]


Kiekviena iš klasių turi perkrautą siuntimo į srautą operatorių << :
[Slot, Slot.cpp:131]
[Item, Item.cpp:76]
[CashBox, Coins.cpp:192]

Kiekviena iš klasių turi perkrautą nuskaitymo iš srauto operatorių >> :
[Slot, Slot.cpp:137]
[Item, Item.cpp:82]
[CashBox, Coins.cpp:1928]

Kiekvienai iš klasių trys elementai - toString, operator<< ir operator>> - yra suderinti tarpusavyje:
[Taip]

Tam suderinimui užtikrinti bent vienai iš klasių yra parašytas ir sėkmingai praeina atskiras unit testas: [mainTest.cpp:73, 170, 271]

Nuskaitymo operatoriai >> suteikia strong exception guarantee (klaidos atveju objektas nepakinta):
[Taip/Ne]

----------------------------------------

REIKALAVIMAS 12

Turiu makefile, įgalinantį darbo su projektu automatizaciją: [Taip]

Tas makefile suteikia galimybes:
- kompiliuoti pavienius kodo failus: [Taip]
- įjungti tarpinius išvedimus: [Nezinau]
- paleisti pagrindinę projekto main funkciją: [Taip]
- paleisti vienetų testus: [Taip]
- išvalyti bei iš naujo sukurti projekto object ir vykdomuosius failus: [Taip]


----------------------------------------

REIKALAVIMAI 7, 11 ir 15

Turiu main funkciją, demonstruojančią klasių patobulinimus/atnaujinimus: 
[Taip]

Turiu UML klasių diagramą, kurioje atsispindi visos trys klasės ir jose atlikti patobulinimai/atnaujinimai:
[Taip]

Įkėliau atnaujintą diagramą į katalogą (.jpg ar kitokiu paveiksliuko formatu):
[UML2]

UML diagramoje pilnai prisilaikoma UML standartinių žymėjimų.
[Taip]

Yra bent viena klasė, kuriai pilnai parengta/parašyta dokumentacija:
[Klasės_vardas]

Dokumentacijai sugeneruoti panaudotas dokumentacijos generatorius:
[generatoriaus pavadinimas, nuoroda]

/* Nurodome naudoto generatoriaus pavadinimą bei nuorodą į įrankio namų puslapį */

Dokumentacija įkelta į katalogą
[pavadinimas]

/* Pateikiame katalogo pavadinimą, kuriame įdėta/sukelta projekto dokumentacija */

----------------------------------------

PASTABOS

[Tekstas]

/* Čia rašome viską, kas "netelpa" į aukščiau nurodytus rėmus, gerąja ar blogąja prasmėmis. Vienas sakinys išreiškia vieną mintį. Skirtingi ir tarpusavyje nesusiję klausimai aptarinėjami skirtingos pastraipose. Jei pastabų nėra, parašome žodį "Nėra". */